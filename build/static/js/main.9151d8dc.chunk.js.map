{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["firebase","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","auth","firestore","analytics","SignIn","className","onClick","provider","GoogleAuthProvider","signInWithPopup","SignOut","currentUser","signOut","ChatRoom","dummy","useRef","messagesRef","collection","query","orderBy","limit","useCollectionData","idField","messages","useState","formValue","setFormValue","sendMessage","e","a","preventDefault","uid","photoURL","displayName","add","text","createdAt","FieldValue","serverTimestamp","current","scrollIntoView","behavior","map","msg","ChatMessage","message","id","ref","onSubmit","value","onChange","target","placeholder","type","disabled","props","messageClass","src","App","useAuthState","user","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"iUAYAA,IAASC,cAAc,CACrBC,OAAQ,0CACRC,WAAY,iCACZC,UAAW,iBACXC,cAAe,6BACfC,kBAAmB,eACnBC,MAAO,4CACPC,cAAe,iBAGjB,IAAMC,EAAOT,IAASS,OAChBC,EAAYV,IAASU,YACTV,IAASW,YAoB3B,SAASC,IAOP,OACE,qCACE,wBAAQC,UAAU,UAAUC,QAPP,WACvB,IAAMC,EAAW,IAAIf,IAASS,KAAKO,mBACnCP,EAAKQ,gBAAgBF,IAKnB,iCACA,2GAMN,SAASG,IAAW,IAAD,EACjB,OAAOT,EAAKU,aACV,2BAAQN,UAAU,WAAWC,QAAS,kBAAML,EAAKW,YAAjD,0BAAsE,OAAtE,yCAKJ,SAASC,IACP,IAAMC,EAAQC,mBACRC,EAAcd,EAAUe,WAAW,YACnCC,EAAQF,EAAYG,QAAQ,aAAaC,MAAM,IAHnC,EAKCC,YAAkBH,EAAO,CAAEI,QAAS,OAAhDC,EALW,sBAOgBC,mBAAS,IAPzB,mBAOXC,EAPW,KAOAC,EAPA,KAUZC,EAAW,uCAAG,WAAOC,GAAP,qBAAAC,EAAA,6DAClBD,EAAEE,iBADgB,EAGqB7B,EAAKU,YAApCoB,EAHU,EAGVA,IAAKC,EAHK,EAGLA,SAAUC,EAHL,EAGKA,YAHL,SAKZjB,EAAYkB,IAAI,CACpBC,KAAMV,EACNW,UAAW5C,IAASU,UAAUmC,WAAWC,kBACzCP,MACAC,WACAC,gBAVgB,OAalBP,EAAa,IACbZ,EAAMyB,QAAQC,eAAe,CAAEC,SAAU,WAdvB,2CAAH,sDAiBjB,OAAQ,qCACR,qBAAKpC,UAAU,UAAf,SACA,mCACM,qDACA,cAACK,EAAD,SAGJ,uBAAML,UAAU,oBAAhB,UAEGkB,GAAYA,EAASmB,KAAI,SAAAC,GAAG,OAAI,cAACC,EAAD,CAA0BC,QAASF,GAAjBA,EAAIG,OAEvD,sBAAMC,IAAKjC,OAGb,yBAAST,UAAU,iBAAnB,SACA,uBAAM2C,SAAUrB,EAAhB,UAEE,uBAAOtB,UAAU,cAAc4C,MAAOxB,EAAWyB,SAAU,SAACtB,GAAD,OAAOF,EAAaE,EAAEuB,OAAOF,QAAQG,YAAY,uBAE5G,wBAAQC,KAAK,SAASC,UAAW7B,EAAWpB,UAAU,eAAtD,wCAQN,SAASuC,EAAYW,GAAQ,IAAD,EACmBA,EAAMV,QAA3CV,EADkB,EAClBA,KAAMJ,EADY,EACZA,IAAKC,EADO,EACPA,SAAUC,EADH,EACGA,YAEvBuB,EAAezB,IAAQ9B,EAAKU,YAAYoB,IAAM,OAAS,WAE7D,OAAQ,mCACN,sBAAK1B,UAAS,kBAAamD,GAA3B,UACE,qBAAKC,IAAKzB,GAAY,0DACtB,sBAAK3B,UAAU,UAAf,UACA,oBAAIA,UAAU,OAAd,SAAsB4B,IACtB,4BAAIE,YAOKuB,MA/Gf,WAAgB,IAAD,EAEEC,YAAa1D,GAArB2D,EAFM,oBAIb,OACE,qBAAKvD,UAAU,MAAf,SAGE,kCACGuD,EAAO,cAAC/C,EAAD,IAAe,cAACT,EAAD,SCxBhByD,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.9151d8dc.chunk.js","sourcesContent":["import React, { useRef, useState } from 'react';\nimport './App.css';\nimport './App.scss';\n\nimport firebase from 'firebase/compat/app';\nimport 'firebase/compat/firestore';\nimport 'firebase/compat/auth';\nimport 'firebase/compat/analytics';\n\nimport { useAuthState } from 'react-firebase-hooks/auth';\nimport { useCollectionData } from 'react-firebase-hooks/firestore';\n\nfirebase.initializeApp({\n  apiKey: \"AIzaSyDRPjTVFTrm2qJp0_Pp-ILXJqlj66tS3jk\",\n  authDomain: \"natecord-d1d2c.firebaseapp.com\",\n  projectId: \"natecord-d1d2c\",\n  storageBucket: \"natecord-d1d2c.appspot.com\",\n  messagingSenderId: \"446540198769\",\n  appId: \"1:446540198769:web:5c845bc62553ac674afcd0\",\n  measurementId: \"G-T4775K0V9R\"\n})\n\nconst auth = firebase.auth();\nconst firestore = firebase.firestore();\nconst analytics = firebase.analytics();\n\n\nfunction App() {\n\n  const [user] = useAuthState(auth);\n\n  return (\n    <div className=\"App\">\n     \n\n      <section>\n        {user ? <ChatRoom /> : <SignIn />}\n        \n      </section>\n\n    </div>\n  );\n}\n\nfunction SignIn() {\n\n  const signInWithGoogle = () => {\n    const provider = new firebase.auth.GoogleAuthProvider();\n    auth.signInWithPopup(provider);\n  }\n\n  return (\n    <>\n      <button className=\"sign-in\" onClick={signInWithGoogle}>Sign in with Google</button>\n      <p>Do not violate the community guidelines or you will be banned for life!</p>\n    </>\n  )\n\n}\n\nfunction SignOut() {\n  return auth.currentUser && (\n    <button className=\"sign-out\" onClick={() => auth.signOut()} className=\"btn\">Sign Out</button>\n  )\n}\n\n\nfunction ChatRoom() {\n  const dummy = useRef();\n  const messagesRef = firestore.collection('messages');\n  const query = messagesRef.orderBy('createdAt').limit(25);\n\n  const [messages] = useCollectionData(query, { idField: 'id' });\n\n  const [formValue, setFormValue] = useState('');\n\n\n  const sendMessage = async (e) => {\n    e.preventDefault();\n\n    const { uid, photoURL, displayName } = auth.currentUser;\n\n    await messagesRef.add({\n      text: formValue,\n      createdAt: firebase.firestore.FieldValue.serverTimestamp(),\n      uid,\n      photoURL,\n      displayName\n    })\n\n    setFormValue('');\n    dummy.current.scrollIntoView({ behavior: 'smooth' });\n  }\n\n  return (<>\n  <div className=\"sidebar\">\n  <header>\n        <h1>Welcome to Natecord</h1>\n        <SignOut />\n      </header>\n  </div>\n    <main className=\"message-container\">\n\n      {messages && messages.map(msg => <ChatMessage key={msg.id} message={msg} />)}\n\n      <span ref={dummy}></span>\n\n    </main>\n    <section className=\"form-container\">\n    <form onSubmit={sendMessage}>\n\n      <input className=\"form__field\" value={formValue} onChange={(e) => setFormValue(e.target.value)} placeholder=\"say something nice\" />\n\n      <button type=\"submit\" disabled={!formValue} className=\"form__button\">üïäÔ∏è</button>\n\n    </form>\n    </section>\n  </>)\n}\n\n\nfunction ChatMessage(props) {\n  const { text, uid, photoURL, displayName } = props.message;\n\n  const messageClass = uid === auth.currentUser.uid ? 'sent' : 'received';\n\n  return (<>\n    <div className={`message ${messageClass}`}>\n      <img src={photoURL || 'https://api.adorable.io/avatars/23/abott@adorable.png'} />\n      <div className=\"content\">\n      <h4 className=\"name\">{displayName}</h4>\n      <p>{text}</p>\n      </div>\n    </div>\n  </>)\n}\n\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}